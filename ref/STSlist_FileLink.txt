2019-08-11(월)
6강 : Oracle과 mybatis 연동 실습(자바 코드에 SQL 명령어를 함께 작성하는 방식)
@Controller => 컨트롤러 bean으로 등록
@Service => 서비스 bean으로 등록
@Repository => dao bean으로 등록
@Inject == @Autowired ==> 의존관계 주입
@RequestMappin => url mapping
@requestParam => get, post 방식의 (폼의) 개별변수
@ModelAttribute => (폼의 전체 데이터 dto로) 묶어서 한꺼번에 저장
@ResponseBody => Controller에서 Method 호출 후, Page로 넘어가는게 아니라 Data로 넘길 때

인터페이스에서는 객체를 만들 수 없지만
@Select("select * from memo order by idx desc")에 의해 객체로 완성할 수 있다.

7강 : 상품테이블 만들기, File Upload 테스트
clob : 최대 4g, 한 테이블에서 여러 칼럼, 검색 가능
long : 최대 2g, 한 테이블에서 1 칼럼, 검색 안됨
UUID uid = UUID.randomUUID(); //uuid(Iniversal Unique Identifier, 범용 고유 식별자) 
String savedName = uid.toString() + "_" + originalName;

8강 : 상품관리(상품목록, 상세화면)
http://localhost/spring02/shop/product/detail.do?product_id=5
=http://localhost/spring02/shop/product/detail/5
사용하는 어노테이션 @PathVariable

2개 이상/1개
sqlSession.selectList/sqlSession.selectOne

9강 : 로그인/로그아웃 처리, 장바구니 기능 만들기
foreign key
alter table cart add constraint cart_userid_fk
foreign key(userid) references member(userid); // 멤버 테이블 외 다른 값 입력시 막음

alter table cart drop constraint cart_poductid_fk; //제약조건 삭제

alter table cart add constraint cart_productid_fk
foreign key(product_id) references product(product_id); //제약조건 추가

10강 : 관리자 로그인/로그아웃 기능, 상품 등록/수정/삭제
배포 디렉토리
<%=application.getRealPath("/") %> // 톰캣이 카피해서 새로운 디렉토리에서 서버를 돌림
개발 디렉토리 >> D:\work\spring02\src\main\webapp\WEB-INF\views\images\
배포 디렉토리 >> D:\work\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\spring02\src\main\webapp\WEB-INF\views\images\

13강 : AOP의 개요, 로그수집 예제
AOP(Aspect Oriented Programming) => OOP(Object Oriented Programming) 를 보완하는 확장적인 개념
Aspect : 공통 관심사(로깅, 보안, 트랜잭션)
Join Points : method를 호출하는 시점, 예외가 발생하는 시점 등과 같이 특정 작업이 실행되는 시점
Advice : Join Points에서 실행되어야 하는 코드(실제 AOP 기능을 구현한 객체)
Pointcuts : 실제로 Advice를 적용시킬 대상(=method)
Proxy : Advice가 적용되었을 때 만들어지는 객체

2019-08-13(화)
14강 : AOP와 트랜잭션 처리 실습 
@Transactional
Method 안에서 모든 함수가 실행되지 않으면 롤백시킴
http 응답 코드 : ex) 404, 500

2019-08-14(수)
15강 : 인터셉터(Interceptor)
클라이언트의 요청 전후에 특정 작업을 처리하고자 할 때 사용하는 기능(url기준으로)
매개변수 - HttpServletRequest, HttpServletResponse
용도 - 로그인 처리, px웹/모바일웹 분기 처리 등

jsp > JspServlet(경유) > html > 클라이언트
html, jsp가 아닌 경우 > DefaultServlet(DispatcherServlet) > 클라이언트
Filter > DispatcherServlet > Interceptor > AOP 

16강 : 자바스크립트 난독화, Proguard 이 가능하므로 코드난독화 필요하다.
변수명, method nam을 읽기 어렵게 변환하나, 근본적으로 디컴파일은 막기 어려움 따라서
spring 프로젝트보다는 자바 프로젝트에 적합(war<jar로export할 경우)
>>어노테이션, xml 설정 등에는 난독화 적용이 어려움  
프로가드 : 대표적인 난독화 라이브러리

2019-08-15(목)
17강 : 드래그앤드롭, ajax 방식의 파일 업로드

2019-08-16(금)
19강 : Smart Editor(CKEditor, SummerNote)
=WYSIWYG Editor(What you see is what you get)
사용자가 현재 화면에서 보고 있는 내용과 동일한 html code를 생성하는 에디터
views 밑에 C+V하면, resources로 인식 하기 때문에 servlet-context에 add resources mapping

location은 실제 경로, mapping은 url 상의 경로

CKEditor -이미지 파일은 디렉토리에 저장, 테이블에는 링크만 저장
summernote -이미지를 테이블에 저장(Db가 무거워 짐; base on base64 code)

20강 : 게시판 만들기1(목록, 글쓰기)
글 번호 만들 때 : 
Sequence-방대한 데이터 관리를 쉽게 하기 위해, 조건에 따라 자동적으로 번호가 생성(객체를 따로 관리해야 함ㅠㅠ)
SubQuery-하나의 쿼리문 안에 포함되어 있는 또 하나의 쿼리문


spring 21강 게시판 만들기2( 페이지 나누기, 검색 기능 )
--게시판 테이블과 회원 테이블 join하는 방법
select bno, title, writer, name, regdate, viewcnt
from board b, member m
where b.writer = m.userid
order by bno desc;

--rownum : 출력순서에 번호를 붙임
select *
from (
  select rownum as rn, A.* --from절을 A 테이블로 만듦
  from (
    select rownum, bno, title, regdate, viewcnt, name --3
    from board b, member m --1
    where b.writer=m.userid --2
    order by bno desc --4 실행 순서
    ) A
) where rn between 50 and 65;
--rownum을 실행 후 rn로 번호를 붙임
--rownum은 1000에서 (-1)되지만 만든 테이블에서 rn로 1부터 다시 번호를 붙임

spring 22강 게시판 만들기3( 상세 화면, 댓글 쓰기/댓글 목록/댓글 갯수)
--댓글 개수 계산하기
select rno, bno, replytext, replyer, name, r.regdate, r.updatedate, 
			(select writer from board where bno=r.bno) writer					--r.bno자리에 상수를 사용하면 상수page의 댓글 개수밖에 모름 따라서 변하는 변수 값을 사용해야 함
		from reply r, member m
		where r.replyer=m.userid and bno=#{bno}
		order by rno desc

spring 23강 게시판 만들기4( 게시물 수정, 파일 첨부, 첨부파일 삭제, 게시물 삭제)
	@Transactional -- 게시물 작성 시 첨부파일을 넣게 되는데 첨부파일의 여부를 확인해야 함, 따라서 글 작성과 첨부파일 의 유무 둘다 작동이 되야해서 꼭 Transactional을 넣어야 함
	@Override
	public void create(BoardDTO dto) throws Exception {
		boardDao.create(dto);
		//첨부파일 정보 저장
		String[] files=dto.getFiles();
		if(files == null) return;
		//첨부파일들의 정보를 tbl_attach 테이블에 insert
		for(String name : files) {
			boardDao.addAttach(name);
		}
	}


===================================================================================
Serveral prots 
>netstat -ao
>>taskkill /f /pid ~

톰캣
C:\Program Files\Apache Software Foundation\Tomcat 9.0

거북이svn
C:\Program Files\TortoiseSVN

sts
F:\STS4
stsworkspace
F:\workspace

eclipse
C:\Users\2VER-HP01\eclipse\java-2019-06\eclipse
eclipseworkspace
C:\Users\2VER-HP01\eclipse-workspace

sql developer
C:\Users\2VER-HP01\Downloads\sqldeveloper-19.1.0.094.2042-no-jre\sqldeveloper

oracle DB
bne/1234

추출된 파일 디렉토리
Serveral prots 
>netstat -ao
>>taskkill /f /pid ~

톰캣
C:\Program Files\Apache Software Foundation\Tomcat 9.0

거북이svn
C:\Program Files\TortoiseSVN

sts
F:\STS4
stsworkspace
F:\workspace

eclipse
C:\Users\2VER-HP01\eclipse\java-2019-06\eclipse
eclipseworkspace
C:\Users\2VER-HP01\eclipse-workspace

sql developer
C:\Users\2VER-HP01\Downloads\sqldeveloper-19.1.0.094.2042-no-jre\sqldeveloper

oracle DB
bne/1234

추출용 파일
SQL server
C:\Users\2VER-HP01\Downloads\SQLEXPRWT_x64_KOR\
>공유 디렉토리C:\Program Files\Microsoft SQL Server\
sa/1234
==================================================
db = model
jsp = view
servlet = controller

root-context = db관련

한글 처리 방법
Get
server.xml > Connector Tag에 connectionTimeout 앞에 URLEncoding="EUC-KR" 삽입
Post
java 소스 파일에 request.setCharacterEncoding("EUC-KR"); 삽입

1. 
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
<%@ include file="../include/header.jsp" %>
</head>
<body>
<%@ include file="../include/menu.jsp" %>
</body>
</html>

2. 한글 처리를 위한 인코딩 xeb.xml
	<!-- 한글 처리를 위한 인코딩 필터 -->
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

3. servlet-context 확인하기
base-package="com.example.spring05

4. 


순서 
1. model.dto>~DTO(db에 서 필드)
2. model.dao ~DAO(인터페이스)
3. model.dao ~~DAO(인터페이스 구현 자바)

